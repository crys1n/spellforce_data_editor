//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpellforceDataEditor.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SpellforceDataEditor.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap building_icon {
            get {
                object obj = ResourceManager.GetObject("building_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap decoration_icon {
            get {
                object obj = ResourceManager.GetObject("decoration_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap flag_icon {
            get {
                object obj = ResourceManager.GetObject("flag_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///in vec3 fragmentPosition;
        ///in vec3 fragmentNormal;
        ///in vec2 UV;
        ///in vec4 fragmentColor;
        ///in vec4 fragmentPositionLightSpace;
        ///in mat4 M;
        ///
        ///out vec4 color;
        ///
        ///uniform float SunStrength;
        ///uniform vec3 SunDirection;
        ///uniform vec4 SunColor;
        ///uniform float AmbientStrength;
        ///uniform vec4 AmbientColor;
        ///uniform sampler2D DiffuseTex;
        ///uniform sampler2D ShadowMap;
        ///uniform bool texture_used;
        ///uniform bool apply_shading;
        ///uniform vec4 FogColor;
        ///uniform float FogStart;
        ///uniform float FogEnd;
        ///un [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string fshader {
            get {
                return ResourceManager.GetString("fshader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///out vec4 FragColor;
        ///  
        ///in vec2 TexCoords;
        ///
        ///uniform sampler2D screenTexture;
        ///void main()
        ///{
        ///    // this is for shadowmap
        ///    /*float color = texture(screenTexture, TexCoords).r;
        ///    if(color != 1.0)
        ///    {
        ///        if(color != 0.0)
        ///            color = (1.0-color)*100;
        ///        color = clamp(color, 0.0, 1.0);
        ///        color = 1.0-color;
        ///        //color = 0.0;
        ///    }
        ///    FragColor = vec4(color, color, color, 1.0);*/
        ///    // this is for final render
        ///    FragColor = texture(screenT [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string fshader_framebuffer_simple {
            get {
                return ResourceManager.GetString("fshader_framebuffer_simple", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///in vec3 fragmentPosition;
        ///in vec2 UV;
        ///in vec3 fragmentNormal;
        ///in vec4 textureWeight;
        ///in vec4 fragmentPositionLightSpace;
        ///in vec3 vpos_orig;
        ///
        ///out vec4 color;
        ///
        ///uniform mat4 M;
        ///uniform bool VisualizeHeight;
        ///uniform bool DisplayGrid;
        ///uniform vec4 GridColor;
        ///uniform float SunStrength;
        ///uniform vec3 SunDirection;
        ///uniform vec4 SunColor;
        ///uniform float AmbientStrength;
        ///uniform vec4 AmbientColor;
        ///uniform vec4 FogColor;
        ///uniform float FogStart;
        ///uniform float FogEnd;
        ///
        ///uniform sa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string fshader_hmap {
            get {
                return ResourceManager.GetString("fshader_hmap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///in vec4 fragmentColor;
        ///
        ///out vec4 color;
        ///
        ///void main(){
        ///  color = fragmentColor;
        ///}.
        /// </summary>
        internal static string fshader_overlay {
            get {
                return ResourceManager.GetString("fshader_overlay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///in vec2 UV;
        ///uniform sampler2D DiffuseTexture;
        ///
        ///void main()
        ///{
        ///    if(texture(DiffuseTexture, UV).a &lt; 0.9)
        ///        discard;
        ///    gl_FragDepth =gl_FragCoord.z;
        ///}.
        /// </summary>
        internal static string fshader_shadowmap {
            get {
                return ResourceManager.GetString("fshader_shadowmap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///in vec3 fragmentPosition;
        ///in vec2 UV;
        ///in vec3 fragmentNormal;
        ///in vec4 fragmentPositionLightSpace;
        ///
        ///out vec4 color;
        ///
        ///uniform mat4 M;
        ///uniform float SunStrength;
        ///uniform vec3 SunDirection;
        ///uniform vec4 SunColor;
        ///uniform float AmbientStrength;
        ///uniform vec4 AmbientColor;
        ///uniform sampler2D DiffuseTex;
        ///uniform sampler2D ShadowMap;
        ///uniform bool apply_shading;
        ///uniform vec4 FogColor;
        ///uniform float FogStart;
        ///uniform float FogEnd;
        ///
        ///vec2 poissonDisk[4] = vec2[](
        ///  vec2( -0.94201 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string fshader_skel {
            get {
                return ResourceManager.GetString("fshader_skel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap hmap_icon {
            get {
                object obj = ResourceManager.GetObject("hmap_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap lake_icon {
            get {
                object obj = ResourceManager.GetObject("lake_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap metadata_icon {
            get {
                object obj = ResourceManager.GetObject("metadata_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap monument_icon {
            get {
                object obj = ResourceManager.GetObject("monument_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap npc_icon {
            get {
                object obj = ResourceManager.GetObject("npc_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap object_icon {
            get {
                object obj = ResourceManager.GetObject("object_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap texture_icon {
            get {
                object obj = ResourceManager.GetObject("texture_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap unit_icon {
            get {
                object obj = ResourceManager.GetObject("unit_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///// Input vertex data, different for all executions of this shader.
        ///layout(location = 0) in vec3 vertexPosition_modelspace;
        ///layout(location = 1) in vec3 vertexNormal;
        ///layout(location = 2) in vec2 vertexUV;
        ///layout(location = 3) in vec4 vertexColor;
        ///layout(location = 4) in mat4 instanceMatrix;
        ///
        ///out vec3 fragmentPosition;
        ///out vec3 fragmentNormal;
        ///out vec2 UV;
        ///out vec4 fragmentColor;
        ///out vec4 fragmentPositionLightSpace;
        ///out mat4 M;
        ///
        ///// Values that stay constant for the whole me [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string vshader {
            get {
                return ResourceManager.GetString("vshader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///layout (location = 0) in vec2 aPos;
        ///layout (location = 1) in vec2 aTexCoords;
        ///
        ///out vec2 TexCoords;
        ///
        ///void main()
        ///{
        ///    gl_Position = vec4(aPos.x, aPos.y, 0.0, 1.0); 
        ///    TexCoords = aTexCoords;
        ///}.
        /// </summary>
        internal static string vshader_framebuffer {
            get {
                return ResourceManager.GetString("vshader_framebuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///// Input vertex data, different for all executions of this shader.
        ///layout(location = 0) in vec3 vertexPosition_modelspace;
        ///layout(location = 1) in vec3 vertexNormal;
        ///
        ///out vec3 fragmentPosition;
        ///out vec2 UV;
        ///out vec3 fragmentNormal;
        ///out vec4 textureWeight;
        ///out vec4 fragmentPositionLightSpace;
        ///out vec3 vpos_orig;
        ///
        ///// Values that stay constant for the whole mesh.
        ///uniform mat4 VP;
        ///uniform mat4 LSM;
        ///uniform mat4 M;
        ///
        ///// each vertex of a quad has a different texW
        ///vec4 texW[6]  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string vshader_hmap {
            get {
                return ResourceManager.GetString("vshader_hmap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///// Input vertex data, different for all executions of this shader.
        ///layout(location = 0) in vec3 vertexPosition_modelspace;
        ///
        ///out vec4 fragmentColor;
        ///
        ///// Values that stay constant for the whole mesh.
        ///uniform mat4 MVP;
        ///uniform vec4 Color;
        ///  
        ///void main(){
        ///  // Output position of the vertex, in clip space : MVP * position
        ///  gl_Position = MVP * vec4(vertexPosition_modelspace,1);
        ///  fragmentColor = Color;
        ///}.
        /// </summary>
        internal static string vshader_overlay {
            get {
                return ResourceManager.GetString("vshader_overlay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///layout(location = 0) in vec3 vertexPosition_modelspace;
        ///layout(location = 1) in vec3 vertexNormal;
        ///layout(location = 2) in vec2 vertexUV;
        ///layout(location = 3) in vec4 vertexColor;
        ///layout(location = 4) in mat4 instanceMatrix;
        ///
        ///out vec2 UV;
        ///
        ///uniform mat4 LSM;  // light space matrix
        ///
        ///void main()
        ///{
        ///    gl_Position = LSM * instanceMatrix * vec4(vertexPosition_modelspace, 1.0);
        ///    UV = vertexUV;
        ///}.
        /// </summary>
        internal static string vshader_shadowmap {
            get {
                return ResourceManager.GetString("vshader_shadowmap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///// Input vertex data, different for all executions of this shader.
        ///layout(location = 0) in vec3 vertexPosition_modelspace;
        ///layout(location = 1) in vec2 vertexUV;
        ///layout(location = 2) in vec3 vertexNormal;
        ///layout(location = 3) in vec4 vertexBoneIndex;
        ///layout(location = 4) in vec4 vertexBoneWeight;
        ///
        ///out vec2 UV;
        ///
        ///// Values that stay constant for the whole mesh.
        ///uniform mat4 LSM;
        ///uniform mat4 M;
        ///uniform mat4 boneTransforms[20];
        ///  
        ///void main(){
        ///  vec4 Vertex;
        ///  vec4 newVerte [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string vshader_shadowmap_animated {
            get {
                return ResourceManager.GetString("vshader_shadowmap_animated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///// Input vertex data, different for all executions of this shader.
        ///layout(location = 0) in vec3 vertexPosition_modelspace;
        ///layout(location = 1) in vec3 vertexNormal;
        ///
        ///out vec2 UV;
        ///
        ///// Values that stay constant for the whole mesh.
        ///uniform mat4 LSM;
        ///uniform mat4 M;
        ///  
        ///void main(){
        ///  // Output position of the vertex, in clip space : MVP * position
        ///  gl_Position = LSM * M* vec4(vertexPosition_modelspace,1);
        ///  UV = vec2(0, 0);
        ///}.
        /// </summary>
        internal static string vshader_shadowmap_heightmap {
            get {
                return ResourceManager.GetString("vshader_shadowmap_heightmap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///// Input vertex data, different for all executions of this shader.
        ///layout(location = 0) in vec3 vertexPosition_modelspace;
        ///layout(location = 1) in vec2 vertexUV;
        ///layout(location = 2) in vec3 vertexNormal;
        ///layout(location = 3) in vec4 vertexBoneIndex;
        ///layout(location = 4) in vec4 vertexBoneWeight;
        ///
        ///out vec3 fragmentPosition;
        ///out vec2 UV;
        ///out vec3 fragmentNormal;
        ///out vec4 fragmentPositionLightSpace;
        ///
        ///// Values that stay constant for the whole mesh.
        ///uniform mat4 VP;
        ///uniform m [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string vshader_skel {
            get {
                return ResourceManager.GetString("vshader_skel", resourceCulture);
            }
        }
    }
}
